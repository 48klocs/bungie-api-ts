/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-ts code generator program.
 * https://github.com/DestinyItemManager/bugie-api-ts
 * Do not edit these files manually.
 */

import {
  DestinyPublicActivityStatus
} from '../destiny2/interfaces';
import {
  GeneralUser
} from '../user/interfaces';
import {
  PagedQuery,
  PartnershipType
} from '../platform';

export const enum TrendingEntryType {
  News = 0,
  DestinyItem = 1,
  DestinyActivity = 2,
  DestinyRitual = 3,
  SupportArticle = 4,
  Creation = 5,
  Stream = 6,
  Update = 7,
  Link = 8,
  ForumTag = 9,
  Container = 10,
  Release = 11
}

export interface TrendingCategories {
  categories?: TrendingCategory[];
}

export interface TrendingCategory {
  categoryName?: string;
  entries?: SearchResultOfTrendingEntry;
  categoryId?: string;
}

export interface SearchResultOfTrendingEntry {
  results?: TrendingEntry[];
  totalResults?: number;
  hasMore?: boolean;
  query?: PagedQuery;
  replacementContinuationToken?: string;
  /**
   * If useTotalResults is true, then totalResults represents an accurate count.
   * 
   * If False, it does not, and may be estimated/only the size of the current page.
   * 
   * Either way, you should probably always only trust hasMore.
   * 
   * This is a long-held historical throwback to when we used to do paging with known
   * total results. Those queries toasted our database, and we were left to hastily
   * alter our endpoints and create backward- compatible shims, of which
   * useTotalResults is one.
   */
  useTotalResults?: boolean;
}

/**
 * The list entry view for trending items. Returns just enough to show the item on
 * the trending page.
 */
export interface TrendingEntry {
  /** The weighted score of this trending item. */
  weight?: number;
  isFeatured?: boolean;
  /**
   * We don't know whether the identifier will be a string, a uint, or a long... so
   * we're going to cast it all to a string. But either way, we need any trending
   * item created to have a single unique identifier for its type.
   */
  identifier?: string;
  /**
   * An enum - unfortunately - dictating all of the possible kinds of trending items
   * that you might get in your result set, in case you want to do custom rendering
   * or call to get the details of the item.
   */
  entityType?: TrendingEntryType;
  /**
   * The localized "display name/article title/'primary localized identifier'" of the
   * entity.
   */
  displayName?: string;
  /**
   * If the entity has a localized tagline/subtitle/motto/whatever, that is found
   * here.
   */
  tagline?: string;
  image?: string;
  startDate?: string;
  endDate?: string;
  link?: string;
  /**
   * If this is populated, the entry has a related WebM video to show. I am 100%
   * certain I am going to regret putting this directly on TrendingEntry, but it will
   * work so yolo
   */
  webmVideo?: string;
  /**
   * If this is populated, the entry has a related MP4 video to show. I am 100%
   * certain I am going to regret putting this directly on TrendingEntry, but it will
   * work so yolo
   */
  mp4Video?: string;
  /**
   * If isFeatured, this image will be populated with whatever the featured image is.
   * Note that this will likely be a very large image, so don't use it all the time.
   */
  featureImage?: string;
  /**
   * If the item is of entityType TrendingEntryType.Container, it may have items -
   * also Trending Entries - contained within it. This is the ordered list of those
   * to display under the Container's header.
   */
  items?: TrendingEntry[];
}

export interface TrendingDetail {
  identifier?: string;
  entityType?: TrendingEntryType;
  news?: TrendingEntryNews;
  support?: TrendingEntrySupportArticle;
  destinyItem?: TrendingEntryDestinyItem;
  destinyActivity?: TrendingEntryDestinyActivity;
  destinyRitual?: TrendingEntryDestinyRitual;
  creation?: TrendingEntryCommunityCreation;
  stream?: TrendingEntryCommunityStream;
}

export interface TrendingEntryNews {
  article?: ContentItemPublicContract;
}

export interface ContentItemPublicContract {
  contentId?: number;
  cType?: string;
  cmsPath?: string;
  creationDate?: string;
  modifyDate?: string;
  allowComments?: boolean;
  hasAgeGate?: boolean;
  minimumAge?: number;
  ratingImagePath?: string;
  author?: GeneralUser;
  autoEnglishPropertyFallback?: boolean;
  /**
   * Firehose content is really a collection of metadata and "properties", which are
   * the potentially-but-not-strictly localizable data that comprises the meat of
   * whatever content is being shown.
   * 
   * As Cole Porter would have crooned, "Anything Goes" with Firehose properties.
   * They are most often strings, but they can theoretically be anything. They are
   * JSON encoded, and could be JSON structures, simple strings, numbers etc... The
   * Content Type of the item (cType) will describe the properties, and thus how they
   * ought to be deserialized.
   */
  properties?: { [key: string]: object };
  representations?: ContentRepresentation[];
  tags?: string[];
  commentSummary?: CommentSummary;
}

export interface ContentRepresentation {
  name?: string;
  path?: string;
  validationString?: string;
}

export interface CommentSummary {
  topicId?: number;
  commentCount?: number;
}

export interface TrendingEntrySupportArticle {
  article?: ContentItemPublicContract;
}

export interface TrendingEntryDestinyItem {
  itemHash?: number;
}

export interface TrendingEntryDestinyActivity {
  activityHash?: number;
  status?: DestinyPublicActivityStatus;
}

export interface TrendingEntryDestinyRitual {
  image?: string;
  icon?: string;
  title?: string;
  subtitle?: string;
  dateStart?: string;
  dateEnd?: string;
  /**
   * A destiny event does not necessarily have a related Milestone, but if it does
   * the details will be returned here.
   */
  milestoneDetails?: DestinyPublicMilestone;
  /**
   * A destiny event will not necessarily have milestone "custom content", but if it
   * does the details will be here.
   */
  eventContent?: DestinyMilestoneContent;
}

export interface TrendingEntryCommunityCreation {
  media?: string;
  title?: string;
  author?: string;
  authorMembershipId?: number;
  postId?: number;
  body?: string;
  upvotes?: number;
}

export interface TrendingEntryCommunityStream {
  image?: string;
  title?: string;
  partnershipIdentifier?: string;
  partnershipType?: PartnershipType;
}