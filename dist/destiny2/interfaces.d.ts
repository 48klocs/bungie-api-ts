/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-ts code generator program.
 * https://github.com/DestinyItemManager/bugie-api-ts
 * Do not edit these files manually.
 */



export const enum DestinyComponentType {
  None = 0,
  /**
   * Profiles is the most basic component, only relevant when calling GetProfile.
   * This returns basic information about the profile, which is almost nothing: a
   * list of characterIds, some information about the last time you logged in, and
   * that most sobering statistic: how long you've played.
   */
  Profiles = 100,
  /**
   * Only applicable for GetProfile, this will return information about receipts for
   * refundable vendor items.
   */
  VendorReceipts = 101,
  /**
   * Asking for this will get you the profile-level inventories, such as your Vault
   * buckets (yeah, the Vault is really inventory buckets located on your Profile)
   */
  ProfileInventories = 102,
  /**
   * This will get you a summary of items on your Profile that we consider to be "
   * currencies", such as Glimmer. I mean, if there's Glimmer in Destiny 2. I didn't
   * say there was Glimmer.
   */
  ProfileCurrencies = 103,
  /** This will get you summary info about each of the characters in the profile. */
  Characters = 200,
  /**
   * This will get you information about any non-equipped items on the character or
   * character(s) in question, if you're allowed to see it. You have to either be
   * authenticated as that user, or that user must allow anonymous viewing of their
   * non-equipped items in Bungie.Net settings to actually get results.
   */
  CharacterInventories = 201,
  /**
   * This will get you information about the progression (faction, experience, etc...
   * "levels") relevant to each character, if you are the currently authenticated
   * user or the user has elected to allow anonymous viewing of its progression info.
   */
  CharacterProgressions = 202,
  /**
   * This will get you just enough information to be able to render the character in
   * 3D if you have written a 3D rendering library for Destiny Characters, or "
   * borrowed" ours. It's okay, I won't tell anyone if you're using it. I'm no snitch.
   * (actually, we don't care if you use it - go to town)
   */
  CharacterRenderData = 203,
  /**
   * This will return info about activities that a user can see and gating on it, if
   * you are the currently authenticated user or the user has elected to allow
   * anonymous viewing of its progression info. Note that the data returned by this
   * can be unfortunately problematic and relatively unreliable in some cases. We'll
   * eventually work on making it more consistently reliable.
   */
  CharacterActivities = 204,
  /**
   * This will return info about the equipped items on the character(s). Everyone can
   * see this.
   */
  CharacterEquipment = 205,
  /**
   * This will return basic info about instanced items - whether they can be equipped,
   * their tracked status, and some info commonly needed in many places (current
   * damage type, primary stat value, etc)
   */
  ItemInstances = 300,
  /**
   * Items can have Objectives (DestinyObjectiveDefinition) bound to them. If they do,
   * this will return info for items that have such bound objectives.
   */
  ItemObjectives = 301,
  /**
   * Items can have perks (DestinyPerkDefinition). If they do, this will return info
   * for what perks are active on items.
   */
  ItemPerks = 302,
  /**
   * If you just want to render the weapon, this is just enough info to do that
   * rendering.
   */
  ItemRenderData = 303,
  /**
   * Items can have stats, like rate of fire. Asking for this component will return
   * requested item's stats if they have stats.
   */
  ItemStats = 304,
  /**
   * Items can have sockets, where plugs can be inserted. Asking for this component
   * will return all info relevant to the sockets on items that have them.
   */
  ItemSockets = 305,
  /**
   * Items can have talent grids, though that matters a lot less frequently than it
   * used to. Asking for this component will return all relevant info about activated
   * Nodes and Steps on this talent grid, like the good ol' days.
   */
  ItemTalentGrids = 306,
  /**
   * Items that *aren't* instanced still have important information you need to know:
   * how much of it you have, the itemHash so you can look up their
   * DestinyInventoryItemDefinition, whether they're locked, etc... Both instanced
   * and non-instanced items will have these properties. You will get this
   * automatically with Inventory components - you only need to pass this when
   * calling GetItem on a specific item.
   */
  ItemCommonData = 307,
  /**
   * Items that are "Plugs" can be inserted into sockets. This returns statuses about
   * those plugs and why they can/can't be inserted. I hear you giggling, there's
   * nothing funny about inserting plugs. Get your head out of the gutter and pay
   * attention!
   */
  ItemPlugStates = 308,
  /**
   * When obtaining vendor information, this will return summary information about
   * the Vendor or Vendors being returned.
   */
  Vendors = 400,
  /**
   * When obtaining vendor information, this will return information about the
   * categories of items provided by the Vendor.
   */
  VendorCategories = 401,
  /**
   * When obtaining vendor information, this will return the information about items
   * being sold by the Vendor.
   */
  VendorSales = 402,
  /**
   * Asking for this component will return you the account's Kiosk statuses: that is,
   * what items have been filled out/acquired. But only if you are the currently
   * authenticated user or the user has elected to allow anonymous viewing of its
   * progression info.
   */
  Kiosks = 500
}

export const enum DestinyStatsGroupType {
  None = 0,
  General = 1,
  Weapons = 2,
  Medals = 3,
  /**
   * This is purely to serve as the dividing line between filterable and un-
   * filterable groups. Below this number is a group you can pass as a filter. Above
   * it are groups used in very specific circumstances and not relevant for filtering.
   */
  ReservedGroups = 100,
  /** Only applicable while generating leaderboards. */
  Leaderboard = 101,
  /** These will *only* be consumed by GetAggregateStatsByActivity */
  Activity = 102,
  /** These are only consumed and returned by GetUniqueWeaponHistory */
  UniqueWeapon = 103,
  Internal = 104
}

export const enum DestinyActivityModeType {
  None = 0,
  Story = 2,
  Strike = 3,
  Raid = 4,
  AllPvP = 5,
  Patrol = 6,
  AllPvE = 7,
  Reserved9 = 9,
  Control = 10,
  Reserved11 = 11,
  /**
   * Clash -> Destiny's name for Team Deathmatch. 4v4 combat, the team with the
   * highest kills at the end of time wins.
   */
  Clash = 12,
  Reserved13 = 13,
  Reserved15 = 15,
  Nightfall = 16,
  HeroicNightfall = 17,
  AllStrikes = 18,
  IronBanner = 19,
  Reserved20 = 20,
  Reserved21 = 21,
  Reserved22 = 22,
  Reserved24 = 24,
  Reserved25 = 25,
  Reserved26 = 26,
  Reserved27 = 27,
  Reserved28 = 28,
  Reserved29 = 29,
  Reserved30 = 30,
  Supremacy = 31,
  Reserved32 = 32,
  Survival = 37,
  Countdown = 38,
  TrialsOfTheNine = 39,
  Social = 40,
  TrialsCountdown = 41,
  TrialsSurvival = 42,
  IronBannerControl = 43,
  IronBannerClash = 44,
  IronBannerSupremacy = 45
}

export const enum PeriodType {
  None = 0,
  Daily = 1,
  AllTime = 2,
  Activity = 3
}

export interface DestinyManifest {
}

export interface GearAssetDataBaseDefinition {
}

export interface DestinyDefinition {
}

export interface DestinyProfileResponse {
}

export interface DestinyCharacterResponse {
}

export interface DestinyMilestone {
}

export interface DestinyMilestoneDefinition {
}

export interface DestinyDisplayPropertiesDefinition {
}

export interface DestinyMilestoneVendorDefinition {
}

export interface DestinyVendorDefinition {
}

export interface DestinyVendorDisplayPropertiesDefinition {
}

export interface DestinyVendorRequirementDisplayEntryDefinition {
}

export interface DestinyInventoryItemDefinition {
}

export interface DestinyItemInvestmentStatDefinition {
}

export interface DestinyStatDefinition {
}

export interface DestinyItemPerkEntryDefinition {
}

export interface DestinySandboxPerkDefinition {
}

export interface DestinyLoreDefinition {
}

export interface DestinyAnimationReference {
}

export interface DestinyItemCategoryDefinition {
}

export interface DestinyDamageTypeDefinition {
}

export const enum DamageType {
  None = 0,
  Kinetic = 1,
  Arc = 2,
  Thermal = 3,
  Void = 4,
  Raid = 5
}

export interface DestinyFactionDefinition {
}

export interface DestinyProgressionDefinition {
}

export interface DestinyProgressionDisplayPropertiesDefinition {
}

export interface DestinyProgressionStepDefinition {
}

export interface DestinyItemQuantity {
}

export interface DestinyFactionVendorDefinition {
}

export interface DestinyDestinationDefinition {
}

export interface DestinyPlaceDefinition {
}

export interface DestinyActivityDefinition {
}

export interface DestinyActivityTypeDefinition {
}

export interface DestinyActivityRewardDefinition {
}

export interface DestinyActivityModifierReferenceDefinition {
}

export interface DestinyActivityModifierDefinition {
}

export interface DestinyActivityChallengeDefinition {
}

export interface DestinyObjectiveDefinition {
}

export interface DestinyLocationDefinition {
}

export interface DestinyLocationReleaseDefinition {
}

export interface DestinyActivityUnlockStringDefinition {
}

export interface DestinyActivityPlaylistItemDefinition {
}

export interface DestinyActivityModeDefinition {
}

export interface DestinyActivityGraphListEntryDefinition {
}

export interface DestinyActivityGraphDefinition {
}

export interface DestinyActivityGraphNodeDefinition {
}

export interface DestinyActivityGraphNodeFeaturingStateDefinition {
}

export interface DestinyActivityGraphNodeActivityDefinition {
}

export interface DestinyActivityGraphArtElementDefinition {
}

export interface DestinyActivityGraphConnectionDefinition {
}

export interface DestinyActivityGraphDisplayObjectiveDefinition {
}

export interface DestinyActivityGraphDisplayProgressionDefinition {
}

export interface DestinyLinkedGraphDefinition {
}

export interface DestinyUnlockExpressionDefinition {
}

export interface DestinyLinkedGraphEntryDefinition {
}

export interface DestinyDestinationBubbleSettingDefinition {
}

export interface DestinyBubbleDefinition {
}

export interface DestinyVendorActionDefinition {
}

export interface DestinyVendorCategoryEntryDefinition {
}

export interface DestinyDisplayCategoryDefinition {
}

export interface DestinyVendorInteractionDefinition {
}

export interface DestinyVendorInteractionReplyDefinition {
}

export interface DestinyVendorInteractionSackEntryDefinition {
}

export interface DestinyVendorInventoryFlyoutDefinition {
}

export interface DestinyVendorInventoryFlyoutBucketDefinition {
}

export interface DestinyInventoryBucketDefinition {
}

export interface DestinyVendorItemDefinition {
}

export interface DestinyItemCreationEntryLevelDefinition {
}

export interface DestinyVendorServiceDefinition {
}

export interface DestinyVendorAcceptedItemDefinition {
}

export interface DestinyMilestoneQuest {
}

export interface DestinyChallengeStatus {
}

export interface DestinyMilestoneVendor {
}

export interface DestinyMilestoneRewardCategory {
}

export interface DestinyMilestoneRewardEntry {
}

export interface DestinyItemResponse {
}

export interface DestinyVendorsResponse {
}

export interface DestinyVendorResponse {
}

export interface DestinyEquipItemResults {
}

export interface DestinyEquipItemResult {
}

export interface DestinyPostGameCarnageReportData {
}

export interface DestinyPostGameCarnageReportEntry {
}

export interface DestinyPostGameCarnageReportTeamEntry {
}

export interface DestinyClanAggregateStat {
}

export interface DestinyEntitySearchResult {
}

export interface DestinyHistoricalStatsAccountResult {
}

export interface DestinyHistoricalStatsWithMerged {
}

export interface DestinyHistoricalStatsByPeriod {
}

export interface DestinyHistoricalStatsPeriodGroup {
}

export interface DestinyHistoricalStatsPerCharacter {
}

export interface DestinyActivityHistoryResults {
}

export interface DestinyHistoricalWeaponStatsData {
}

export interface DestinyHistoricalWeaponStats {
}

export interface DestinyAggregateActivityResults {
}

export interface DestinyAggregateActivityStats {
}

export interface DestinyMilestoneContent {
}

export interface DestinyMilestoneContentItemCategory {
}

export interface DestinyPublicActivityStatus {
}