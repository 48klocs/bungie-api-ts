/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-ts code generator program.
 * https://github.com/DestinyItemManager/bugie-api-ts
 * Do not edit these files manually.
 */
/** Returns the current version of the manifest as a json object. */
export async function getDestinyManifest(http) {
    return http({
        method: 'GET',
        url: 'https://www.bungie.net/Platform/Destiny2/Manifest/'
    });
}
/**
 * Returns the static definition of an entity of the given Type and hash identifier.
 * Examine the API Documentation for the Type Names of entities that have their
 * own definitions. Note that the return type will always *inherit from*
 * DestinyDefinition, but the specific type returned will be the requested entity
 * type if it can be found. Please don't use this as a chatty alternative to the
 * Manifest database if you require large sets of data, but for simple and one-off
 * accesses this should be handy.
 */
export async function getDestinyEntityDefinition(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/Manifest/${params.entityType}/${params.hashIdentifier}/`
    });
}
/** Returns a list of Destiny memberships given a full Gamertag or PSN ID. */
export async function searchDestinyPlayer(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/SearchDestinyPlayer/${params.membershipType}/${params.displayName}/`
    });
}
/** Returns Destiny Profile information for the supplied membership. */
export async function getProfile(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Profile/${params.destinyMembershipId}/`,
        params: {
            components: params.components ? params.components.join(',') : undefined
        }
    });
}
/** Returns character information for the supplied character. */
export async function getCharacter(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Profile/${params.destinyMembershipId}/Character/${params.characterId}/`,
        params: {
            components: params.components ? params.components.join(',') : undefined
        }
    });
}
/**
 * Returns information on the weekly clan rewards and if the clan has earned them
 * or not. Note that this will always report rewards as not redeemed.
 */
export async function getClanWeeklyRewardState(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/Clan/${params.groupId}/WeeklyRewardState/`
    });
}
/**
 * Retrieve the details of an instanced Destiny Item. An instanced Destiny item is
 * one with an ItemInstanceId. Non-instanced items, such as materials, have no
 * useful instance-specific details and thus are not queryable here.
 */
export async function getItem(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Profile/${params.destinyMembershipId}/Item/${params.itemInstanceId}/`,
        params: {
            components: params.components ? params.components.join(',') : undefined
        }
    });
}
/**
 * Get currently available vendors from the list of vendors that can possibly have
 * rotating inventory. Note that this does not include things like preview vendors
 * and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use
 * their definitions as-is for those. PREVIEW: This service is not yet active, but
 * we are returning the planned schema of the endpoint for review, comment, and
 * preparation for its eventual implementation.
 */
export async function getVendors(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Profile/${params.destinyMembershipId}/Character/${params.characterId}/Vendors/`,
        params: {
            components: params.components ? params.components.join(',') : undefined
        }
    });
}
/**
 * Get the details of a specific Vendor. PREVIEW: This service is not yet active,
 * but we are returning the planned schema of the endpoint for review, comment, and
 * preparation for its eventual implementation.
 */
export async function getVendor(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Profile/${params.destinyMembershipId}/Character/${params.characterId}/Vendors/${params.vendorHash}/`,
        params: {
            components: params.components ? params.components.join(',') : undefined
        }
    });
}
/**
 * Transfer an item to/from your vault. You must have a valid Destiny account. You
 * must also pass BOTH a reference AND an instance ID if it's an instanced item.
 * itshappening.gif
 */
export async function transferItem(http, body) {
    return http({
        method: 'POST',
        url: 'https://www.bungie.net/Platform/Destiny2/Actions/Items/TransferItem/',
        body
    });
}
/**
 * Extract an item from the Postmaster, with whatever implications that may entail.
 * You must have a valid Destiny account. You must also pass BOTH a reference AND
 * an instance ID if it's an instanced item.
 */
export async function pullFromPostmaster(http, body) {
    return http({
        method: 'POST',
        url: 'https://www.bungie.net/Platform/Destiny2/Actions/Items/PullFromPostmaster/',
        body
    });
}
/**
 * Equip an item. You must have a valid Destiny Account, and either be in a social
 * space, in orbit, or offline.
 */
export async function equipItem(http, body) {
    return http({
        method: 'POST',
        url: 'https://www.bungie.net/Platform/Destiny2/Actions/Items/EquipItem/',
        body
    });
}
/**
 * Equip a list of items by itemInstanceIds. You must have a valid Destiny Account,
 * and either be in a social space, in orbit, or offline. Any items not found on
 * your character will be ignored.
 */
export async function equipItems(http, body) {
    return http({
        method: 'POST',
        url: 'https://www.bungie.net/Platform/Destiny2/Actions/Items/EquipItems/',
        body
    });
}
/** Set the Lock State for an instanced item. You must have a valid Destiny Account. */
export async function setItemLockState(http, body) {
    return http({
        method: 'POST',
        url: 'https://www.bungie.net/Platform/Destiny2/Actions/Items/SetLockState/',
        body
    });
}
/**
 * Insert a plug into a socketed item. I know how it sounds, but I assure you it's
 * much more G-rated than you might be guessing. We haven't decided yet whether
 * this will be able to insert plugs that have side effects, but if we do it will
 * require special scope permission for an application attempting to do so. You
 * must have a valid Destiny Account, and either be in a social space, in orbit, or
 * offline. PREVIEW: This service is not yet active, but we are returning the
 * planned schema of the endpoint for review, comment, and preparation for its
 * eventual implementation.
 */
export async function insertSocketPlug(http, body) {
    return http({
        method: 'POST',
        url: 'https://www.bungie.net/Platform/Destiny2/Actions/Items/InsertSocketPlug/',
        body
    });
}
/**
 * Activate a Talent Node. Chill out, everyone: we haven't decided yet whether this
 * will be able to activate nodes with costs, but if we do it will require special
 * scope permission for an application attempting to do so. You must have a valid
 * Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW:
 * This service is not actually implemented yet, but we are returning the planned
 * schema of the endpoint for review, comment, and preparation for its eventual
 * implementation.
 */
export async function activateTalentNode(http, body) {
    return http({
        method: 'POST',
        url: 'https://www.bungie.net/Platform/Destiny2/Actions/Items/ActivateTalentNode/',
        body
    });
}
/** Gets the available post game carnage report for the activity ID. */
export async function getPostGameCarnageReport(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/Stats/PostGameCarnageReport/${params.activityId}/`
    });
}
/**
 * Report a player that you met in an activity that was engaging in ToS-violating
 * activities. Both you and the offending player must have played in the activityId
 * passed in. Please use this judiciously and only when you have strong suspicions
 * of violation, pretty please.
 */
export async function reportOffensivePostGameCarnageReportPlayer(http, params, body) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/Destiny2/Stats/PostGameCarnageReport/${params.activityId}/Report/`,
        body
    });
}
/** Gets historical stats definitions. */
export async function getHistoricalStatsDefinition(http) {
    return http({
        method: 'GET',
        url: 'https://www.bungie.net/Platform/Destiny2/Stats/Definition/'
    });
}
/**
 * Gets leaderboards with the signed in user's friends and the supplied
 * destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and
 * may experience rough edges. The schema is in final form, but there may be bugs
 * that prevent desirable operation.
 */
export async function getClanLeaderboards(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/Stats/Leaderboards/Clans/${params.groupId}/`,
        params: {
            maxtop: params.maxtop,
            modes: params.modes,
            statid: params.statid
        }
    });
}
/**
 * Gets aggregated stats for a clan using the same categories as the clan
 * leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough
 * edges. The schema is in final form, but there may be bugs that prevent desirable
 * operation.
 */
export async function getClanAggregateStats(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/Stats/AggregateClanStats/${params.groupId}/`,
        params: {
            modes: params.modes
        }
    });
}
/**
 * Gets leaderboards with the signed in user's friends and the supplied
 * destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been
 * implemented. It is being returned for a preview of future functionality, and for
 * public comment/suggestion/preparation.
 */
export async function getLeaderboards(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Account/${params.destinyMembershipId}/Stats/Leaderboards/`,
        params: {
            maxtop: params.maxtop,
            modes: params.modes,
            statid: params.statid
        }
    });
}
/**
 * Gets leaderboards with the signed in user's friends and the supplied
 * destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and
 * may experience rough edges. The schema is in final form, but there may be bugs
 * that prevent desirable operation.
 */
export async function getLeaderboardsForCharacter(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/Stats/Leaderboards/${params.membershipType}/${params.destinyMembershipId}/${params.characterId}/`,
        params: {
            maxtop: params.maxtop,
            modes: params.modes,
            statid: params.statid
        }
    });
}
/** Gets a page list of Destiny items. */
export async function searchDestinyEntities(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/Armory/Search/${params.type}/${params.searchTerm}/`,
        params: {
            page: params.page
        }
    });
}
/** Gets historical stats for indicated character. */
export async function getHistoricalStats(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Account/${params.destinyMembershipId}/Character/${params.characterId}/Stats/`,
        params: {
            dayend: params.dayend,
            daystart: params.daystart,
            groups: params.groups ? params.groups.join(',') : undefined,
            modes: params.modes ? params.modes.join(',') : undefined,
            periodType: params.periodType
        }
    });
}
/**
 * Gets aggregate historical stats organized around each character for a given
 * account.
 */
export async function getHistoricalStatsForAccount(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Account/${params.destinyMembershipId}/Stats/`,
        params: {
            groups: params.groups ? params.groups.join(',') : undefined
        }
    });
}
/** Gets activity history stats for indicated character. */
export async function getActivityHistory(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Account/${params.destinyMembershipId}/Character/${params.characterId}/Stats/Activities/`,
        params: {
            count: params.count,
            mode: params.mode,
            page: params.page
        }
    });
}
/** Gets details about unique weapon usage, including all exotic weapons. */
export async function getUniqueWeaponHistory(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Account/${params.destinyMembershipId}/Character/${params.characterId}/Stats/UniqueWeapons/`
    });
}
/**
 * Gets all activities the character has participated in together with aggregate
 * statistics for those activities.
 */
export async function getDestinyAggregateActivityStats(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/${params.membershipType}/Account/${params.destinyMembershipId}/Character/${params.characterId}/Stats/AggregateActivityStats/`
    });
}
/** Gets custom localized content for the milestone of the given hash, if it exists. */
export async function getPublicMilestoneContent(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/Destiny2/Milestones/${params.milestoneHash}/Content/`
    });
}
/** Gets public information about currently available Milestones. */
export async function getPublicMilestones(http) {
    return http({
        method: 'GET',
        url: 'https://www.bungie.net/Platform/Destiny2/Milestones/'
    });
}
//# sourceMappingURL=api.js.map