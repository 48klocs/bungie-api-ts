/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-ts code generator program.
 * https://github.com/DestinyItemManager/bugie-api-ts
 * Do not edit these files manually.
 */
/** Returns a list of all available group avatars for the signed-in user. */
export async function getAvailableAvatars(http) {
    return http({
        method: 'GET',
        url: 'https://www.bungie.net/Platform/GroupV2/GetAvailableAvatars/'
    });
}
/** Returns a list of all available group themes. */
export async function getAvailableThemes(http) {
    return http({
        method: 'GET',
        url: 'https://www.bungie.net/Platform/GroupV2/GetAvailableThemes/'
    });
}
/**
 * Gets the state of the user's clan invite preferences for a particular membership
 * type - true if they wish to be invited to clans, false otherwise.
 */
export async function getUserClanInviteSetting(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/GroupV2/GetUserClanInviteSetting/${params.mType}/`
    });
}
/**
 * Sets the state of the user's clan invite preferences - true if they wish to be
 * invited to clans, false otherwise.
 */
export async function setUserClanInviteSetting(http, params) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/SetUserClanInviteSetting/${params.mType}/${params.allowInvites}/`
    });
}
/**
 * Gets groups recommended for you based on the groups to whom those you follow
 * belong.
 */
export async function getRecommendedGroups(http, params) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/Recommended/${params.groupType}/${params.createDateRange}/`
    });
}
/** Search for Groups. */
export async function groupSearch(http, body) {
    return http({
        method: 'POST',
        url: 'https://www.bungie.net/Platform/GroupV2/Search/',
        body
    });
}
/** Get information about a specific group of the given ID. */
export async function getGroup(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/`
    });
}
/** Get information about a specific group with the given name and type. */
export async function getGroupByName(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/GroupV2/Name/${params.groupName}/${params.groupType}/`
    });
}
/** Gets a list of available optional conversation channels and their settings. */
export async function getGroupOptionalConversations(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/OptionalConversations/`
    });
}
/** Create a new group. */
export async function createGroup(http, body) {
    return http({
        method: 'POST',
        url: 'https://www.bungie.net/Platform/GroupV2/Create/',
        body
    });
}
/**
 * Edit an existing group. You must have suitable permissions in the group to
 * perform this operation. This latest revision will only edit the fields you pass
 * in - pass null for properties you want to leave unaltered.
 */
export async function editGroup(http, params, body) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Edit/`,
        body
    });
}
/**
 * Edit an existing group's clan banner. You must have suitable permissions in the
 * group to perform this operation. All fields are required.
 */
export async function editClanBanner(http, params, body) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/EditClanBanner/`,
        body
    });
}
/**
 * Edit group options only available to a founder. You must have suitable
 * permissions in the group to perform this operation.
 */
export async function editFounderOptions(http, params, body) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/EditFounderOptions/`,
        body
    });
}
/**
 * Add a new optional conversation/chat channel. Requires admin permissions to the
 * group.
 */
export async function addOptionalConversation(http, params, body) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/OptionalConversations/Add/`,
        body
    });
}
/**
 * Edit the settings of an optional conversation/chat channel. Requires admin
 * permissions to the group.
 */
export async function editOptionalConversation(http, params, body) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/OptionalConversations/Edit/${params.conversationId}/`,
        body
    });
}
/** Get the list of members in a given group. */
export async function getMembersOfGroup(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/`,
        params: {
            memberType: params.memberType,
            nameSearch: params.nameSearch
        }
    });
}
/** Get the list of members in a given group who are of admin level or higher. */
export async function getAdminsAndFounderOfGroup(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/AdminsAndFounder/`
    });
}
/**
 * Edit the membership type of a given member. You must have suitable permissions
 * in the group to perform this operation.
 */
export async function editGroupMembership(http, params) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/${params.membershipType}/${params.membershipId}/SetMembershipType/${params.memberType}/`
    });
}
/**
 * Kick a member from the given group, forcing them to reapply if they wish to re-
 * join the group. You must have suitable permissions in the group to perform this
 * operation.
 */
export async function kickMember(http, params) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/${params.membershipType}/${params.membershipId}/Kick/`
    });
}
/**
 * Bans the requested member from the requested group for the specified period of
 * time.
 */
export async function banMember(http, params, body) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/${params.membershipType}/${params.membershipId}/Ban/`,
        body
    });
}
/** Unbans the requested member, allowing them to re-apply for membership. */
export async function unbanMember(http, params) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/${params.membershipType}/${params.membershipId}/Unban/`
    });
}
/**
 * Get the list of banned members in a given group. Only accessible to group Admins
 * and above. Not applicable to all groups. Check group features.
 */
export async function getBannedMembersOfGroup(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Banned/`
    });
}
/**
 * An administrative method to allow the founder of a group or clan to give up
 * their position to another admin permanently.
 */
export async function abdicateFoundership(http, params) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Admin/AbdicateFoundership/${params.membershipType}/${params.founderIdNew}/`
    });
}
/** Request permission to join the given group. */
export async function requestGroupMembership(http, params, body) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/Apply/${params.membershipType}/`,
        body
    });
}
/**
 * Get the list of users who are awaiting a decision on their application to join a
 * given group. Modified to include application info.
 */
export async function getPendingMemberships(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/Pending/`
    });
}
/** Get the list of users who have been invited into the group. */
export async function getInvitedIndividuals(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/InvitedIndividuals/`
    });
}
/**
 * Rescind your application to join the given group or leave the group if you are
 * already a member..
 */
export async function rescindGroupMembership(http, params) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/Rescind/${params.membershipType}/`
    });
}
/** Approve all of the pending users for the given group. */
export async function approveAllPending(http, params, body) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/ApproveAll/`,
        body
    });
}
/** Deny all of the pending users for the given group. */
export async function denyAllPending(http, params, body) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/DenyAll/`,
        body
    });
}
/** Approve all of the pending users for the given group. */
export async function approvePendingForList(http, params, body) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/ApproveList/`,
        body
    });
}
/**
 * Approve the given membershipId to join the group/clan as long as they have
 * applied.
 */
export async function approvePending(http, params, body) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/Approve/${params.membershipType}/${params.membershipId}/`,
        body
    });
}
/** Deny all of the pending users for the given group that match the passed-in . */
export async function denyPendingForList(http, params, body) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/DenyList/`,
        body
    });
}
/** Get information about the groups that a given member has joined. */
export async function getGroupsForMember(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/GroupV2/User/${params.membershipType}/${params.membershipId}/${params.filter}/${params.groupType}/`
    });
}
/**
 * Get information about the groups that a given member has applied to or been
 * invited to.
 */
export async function getPotentialGroupsForMember(http, params) {
    return http({
        method: 'GET',
        url: `https://www.bungie.net/Platform/GroupV2/User/Potential/${params.membershipType}/${params.membershipId}/${params.filter}/${params.groupType}/`
    });
}
/** Invite a user to join this group. */
export async function individualGroupInvite(http, params, body) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/IndividualInvite/${params.membershipType}/${params.membershipId}/`,
        body
    });
}
/** Cancels a pending invitation to join a group. */
export async function individualGroupInviteCancel(http, params) {
    return http({
        method: 'POST',
        url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/IndividualInviteCancel/${params.membershipType}/${params.membershipId}/`
    });
}
//# sourceMappingURL=api.js.map