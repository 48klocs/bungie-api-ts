/**
 * Bungie.Net API
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * OpenAPI spec version: 2.1.1
 * Contact: support@bungie.com
 *
 * NOTE: This class is auto generated by the bungie-api-ts code generator program.
 * https://github.com/DestinyItemManager/bugie-api-ts
 * Do not edit these files manually.
 */

import { HttpClient } from '../http';

import {
  BungieMembershipType,
  int32ServerResponse
} from '../common';
import {
  CEListOfGroupOptionalConversationServerResponse,
  ClanBanner,
  DictionaryOfint32AndstringServerResponse,
  GroupAction,
  GroupApplicationListRequest,
  GroupApplicationRequest,
  GroupApplicationResponseServerResponse,
  GroupBanRequest,
  GroupCreationResponseServerResponse,
  GroupDateRange,
  GroupEditAction,
  GroupMemberLeaveResultServerResponse,
  GroupMembershipSearchResponseServerResponse,
  GroupOptionalConversationAddRequest,
  GroupOptionalConversationEditRequest,
  GroupOptionsEditAction,
  GroupPotentialMemberStatus,
  GroupPotentialMembershipSearchResponseServerResponse,
  GroupQuery,
  GroupResponseServerResponse,
  GroupSearchResponseServerResponse,
  GroupType,
  GroupsForMemberFilter,
  ListOfEntityActionResultServerResponse,
  ListOfGroupThemeServerResponse,
  ListOfGroupV2CardServerResponse,
  RuntimeGroupMemberType,
  SearchResultOfGroupBanServerResponse,
  SearchResultOfGroupMemberApplicationServerResponse,
  SearchResultOfGroupMemberServerResponse,
  booleanServerResponse
} from './interfaces';
import {
  int64ServerResponse
} from '../platform';

/** Returns a list of all available group avatars for the signed-in user. */
export async function getAvailableAvatars(http: HttpClient): Promise<DictionaryOfint32AndstringServerResponse> {
  return http({
    method: 'GET',
    url: 'https://www.bungie.net/Platform/GroupV2/GetAvailableAvatars/'
  });
}

/** Returns a list of all available group themes. */
export async function getAvailableThemes(http: HttpClient): Promise<ListOfGroupThemeServerResponse> {
  return http({
    method: 'GET',
    url: 'https://www.bungie.net/Platform/GroupV2/GetAvailableThemes/'
  });
}

export interface GetUserClanInviteSettingParams {
  /** The Destiny membership type of the account we wish to access settings. */
  mType: BungieMembershipType;
}

/**
 * Gets the state of the user's clan invite preferences for a particular membership
 * type - true if they wish to be invited to clans, false otherwise.
 */
export async function getUserClanInviteSetting(http: HttpClient, params: GetUserClanInviteSettingParams): Promise<booleanServerResponse> {
  return http({
    method: 'GET',
    url: `https://www.bungie.net/Platform/GroupV2/GetUserClanInviteSetting/${params.mType}/`
  });
}

export interface SetUserClanInviteSettingParams {
  /** True to allow invites of this user to clans, false otherwise. */
  allowInvites: boolean;
  /** The Destiny membership type of linked account we are manipulating. */
  mType: BungieMembershipType;
}

/**
 * Sets the state of the user's clan invite preferences - true if they wish to be
 * invited to clans, false otherwise.
 */
export async function setUserClanInviteSetting(http: HttpClient, params: SetUserClanInviteSettingParams): Promise<int32ServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/SetUserClanInviteSetting/${params.mType}/${params.allowInvites}/`
  });
}

export interface GetRecommendedGroupsParams {
  /** Requested range in which to pull recommended groups */
  createDateRange: GroupDateRange;
  /** Type of groups requested */
  groupType: GroupType;
}

/**
 * Gets groups recommended for you based on the groups to whom those you follow
 * belong.
 */
export async function getRecommendedGroups(http: HttpClient, params: GetRecommendedGroupsParams): Promise<ListOfGroupV2CardServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/Recommended/${params.groupType}/${params.createDateRange}/`
  });
}

export interface GroupSearchParams {
  body: GroupQuery;
}

/** Search for Groups. */
export async function groupSearch(http: HttpClient, params: GroupSearchParams): Promise<GroupSearchResponseServerResponse> {
  return http({
    method: 'POST',
    url: 'https://www.bungie.net/Platform/GroupV2/Search/',
    body: params.body
  });
}

export interface GetGroupParams {
  /** Requested group's id. */
  groupId: number;
}

/** Get information about a specific group of the given ID. */
export async function getGroup(http: HttpClient, params: GetGroupParams): Promise<GroupResponseServerResponse> {
  return http({
    method: 'GET',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/`
  });
}

export interface GetGroupByNameParams {
  /** Exact name of the group to find. */
  groupName: string;
  /** Type of group to find. */
  groupType: GroupType;
}

/** Get information about a specific group with the given name and type. */
export async function getGroupByName(http: HttpClient, params: GetGroupByNameParams): Promise<GroupResponseServerResponse> {
  return http({
    method: 'GET',
    url: `https://www.bungie.net/Platform/GroupV2/Name/${params.groupName}/${params.groupType}/`
  });
}

export interface GetGroupOptionalConversationsParams {
  /** Requested group's id. */
  groupId: number;
}

/** Gets a list of available optional conversation channels and their settings. */
export async function getGroupOptionalConversations(http: HttpClient, params: GetGroupOptionalConversationsParams): Promise<CEListOfGroupOptionalConversationServerResponse> {
  return http({
    method: 'GET',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/OptionalConversations/`
  });
}

export interface CreateGroupParams {
  body: GroupAction;
}

/** Create a new group. */
export async function createGroup(http: HttpClient, params: CreateGroupParams): Promise<GroupCreationResponseServerResponse> {
  return http({
    method: 'POST',
    url: 'https://www.bungie.net/Platform/GroupV2/Create/',
    body: params.body
  });
}

export interface EditGroupParams {
  /** Group ID of the group to edit. */
  groupId: number;
  body: GroupEditAction;
}

/**
 * Edit an existing group. You must have suitable permissions in the group to
 * perform this operation. This latest revision will only edit the fields you pass
 * in - pass null for properties you want to leave unaltered.
 */
export async function editGroup(http: HttpClient, params: EditGroupParams): Promise<int32ServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Edit/`,
    body: params.body
  });
}

export interface EditClanBannerParams {
  /** Group ID of the group to edit. */
  groupId: number;
  body: ClanBanner;
}

/**
 * Edit an existing group's clan banner. You must have suitable permissions in the
 * group to perform this operation. All fields are required.
 */
export async function editClanBanner(http: HttpClient, params: EditClanBannerParams): Promise<int32ServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/EditClanBanner/`,
    body: params.body
  });
}

export interface EditFounderOptionsParams {
  /** Group ID of the group to edit. */
  groupId: number;
  body: GroupOptionsEditAction;
}

/**
 * Edit group options only available to a founder. You must have suitable
 * permissions in the group to perform this operation.
 */
export async function editFounderOptions(http: HttpClient, params: EditFounderOptionsParams): Promise<int32ServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/EditFounderOptions/`,
    body: params.body
  });
}

export interface AddOptionalConversationParams {
  /** Group ID of the group to edit. */
  groupId: number;
  body: GroupOptionalConversationAddRequest;
}

/**
 * Add a new optional conversation/chat channel. Requires admin permissions to the
 * group.
 */
export async function addOptionalConversation(http: HttpClient, params: AddOptionalConversationParams): Promise<int64ServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/OptionalConversations/Add/`,
    body: params.body
  });
}

export interface EditOptionalConversationParams {
  /** Conversation Id of the channel being edited. */
  conversationId: number;
  /** Group ID of the group to edit. */
  groupId: number;
  body: GroupOptionalConversationEditRequest;
}

/**
 * Edit the settings of an optional conversation/chat channel. Requires admin
 * permissions to the group.
 */
export async function editOptionalConversation(http: HttpClient, params: EditOptionalConversationParams): Promise<int64ServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/OptionalConversations/Edit/${params.conversationId}/`,
    body: params.body
  });
}

export interface GetMembersOfGroupParams {
  /** Page number (starting with 1). Each page has a fixed size of 50 items per page. */
  currentpage: number;
  /** The ID of the group. */
  groupId: number;
  /** Filter out other member types. Use None for all members. */
  memberType?: RuntimeGroupMemberType;
  /**
   * The name fragment upon which a search should be executed for members with
   * matching display or unique names.
   */
  nameSearch?: string;
}

/** Get the list of members in a given group. */
export async function getMembersOfGroup(http: HttpClient, params: GetMembersOfGroupParams): Promise<SearchResultOfGroupMemberServerResponse> {
  return http({
    method: 'GET',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/`,
    params: {
      memberType: params.memberType,
      nameSearch: params.nameSearch
    }
  });
}

export interface GetAdminsAndFounderOfGroupParams {
  /** Page number (starting with 1). Each page has a fixed size of 50 items per page. */
  currentpage: number;
  /** The ID of the group. */
  groupId: number;
}

/** Get the list of members in a given group who are of admin level or higher. */
export async function getAdminsAndFounderOfGroup(http: HttpClient, params: GetAdminsAndFounderOfGroupParams): Promise<SearchResultOfGroupMemberServerResponse> {
  return http({
    method: 'GET',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/AdminsAndFounder/`
  });
}

export interface EditGroupMembershipParams {
  /** ID of the group to which the member belongs. */
  groupId: number;
  /** Membership ID to modify. */
  membershipId: number;
  /** Membership type of the provide membership ID. */
  membershipType: BungieMembershipType;
  /** New membertype for the specified member. */
  memberType: RuntimeGroupMemberType;
}

/**
 * Edit the membership type of a given member. You must have suitable permissions
 * in the group to perform this operation.
 */
export async function editGroupMembership(http: HttpClient, params: EditGroupMembershipParams): Promise<int32ServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/${params.membershipType}/${params.membershipId}/SetMembershipType/${params.memberType}/`
  });
}

export interface KickMemberParams {
  /** Group ID to kick the user from. */
  groupId: number;
  /** Membership ID to kick. */
  membershipId: number;
  /** Membership type of the provided membership ID. */
  membershipType: BungieMembershipType;
}

/**
 * Kick a member from the given group, forcing them to reapply if they wish to re-
 * join the group. You must have suitable permissions in the group to perform this
 * operation.
 */
export async function kickMember(http: HttpClient, params: KickMemberParams): Promise<GroupMemberLeaveResultServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/${params.membershipType}/${params.membershipId}/Kick/`
  });
}

export interface BanMemberParams {
  /** Group ID that has the member to ban. */
  groupId: number;
  /** Membership ID of the member to ban from the group. */
  membershipId: number;
  /** Membership type of the provided membership ID. */
  membershipType: BungieMembershipType;
  body: GroupBanRequest;
}

/**
 * Bans the requested member from the requested group for the specified period of
 * time.
 */
export async function banMember(http: HttpClient, params: BanMemberParams): Promise<int32ServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/${params.membershipType}/${params.membershipId}/Ban/`,
    body: params.body
  });
}

export interface UnbanMemberParams {
  groupId: number;
  /** Membership ID of the member to unban from the group */
  membershipId: number;
  /** Membership type of the provided membership ID. */
  membershipType: BungieMembershipType;
}

/** Unbans the requested member, allowing them to re-apply for membership. */
export async function unbanMember(http: HttpClient, params: UnbanMemberParams): Promise<int32ServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/${params.membershipType}/${params.membershipId}/Unban/`
  });
}

export interface GetBannedMembersOfGroupParams {
  /** Page number (starting with 1). Each page has a fixed size of 50 entries. */
  currentpage: number;
  /** Group ID whose banned members you are fetching */
  groupId: number;
}

/**
 * Get the list of banned members in a given group. Only accessible to group Admins
 * and above. Not applicable to all groups. Check group features.
 */
export async function getBannedMembersOfGroup(http: HttpClient, params: GetBannedMembersOfGroupParams): Promise<SearchResultOfGroupBanServerResponse> {
  return http({
    method: 'GET',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Banned/`
  });
}

export interface AbdicateFoundershipParams {
  /** The new founder for this group. Must already be a group admin. */
  founderIdNew: number;
  /** The target group id. */
  groupId: number;
  /** Membership type of the provided founderIdNew. */
  membershipType: BungieMembershipType;
}

/**
 * An administrative method to allow the founder of a group or clan to give up
 * their position to another admin permanently.
 */
export async function abdicateFoundership(http: HttpClient, params: AbdicateFoundershipParams): Promise<booleanServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Admin/AbdicateFoundership/${params.membershipType}/${params.founderIdNew}/`
  });
}

export interface RequestGroupMembershipParams {
  /** ID of the group you would like to join. */
  groupId: number;
  /** MembershipType of the account to use when joining. */
  membershipType: BungieMembershipType;
  body: GroupApplicationRequest;
}

/** Request permission to join the given group. */
export async function requestGroupMembership(http: HttpClient, params: RequestGroupMembershipParams): Promise<GroupApplicationResponseServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/Apply/${params.membershipType}/`,
    body: params.body
  });
}

export interface GetPendingMembershipsParams {
  /** Page number (starting with 1). Each page has a fixed size of 50 items per page. */
  currentpage: number;
  /** ID of the group. */
  groupId: number;
}

/**
 * Get the list of users who are awaiting a decision on their application to join a
 * given group. Modified to include application info.
 */
export async function getPendingMemberships(http: HttpClient, params: GetPendingMembershipsParams): Promise<SearchResultOfGroupMemberApplicationServerResponse> {
  return http({
    method: 'GET',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/Pending/`
  });
}

export interface GetInvitedIndividualsParams {
  /** Page number (starting with 1). Each page has a fixed size of 50 items per page. */
  currentpage: number;
  /** ID of the group. */
  groupId: number;
}

/** Get the list of users who have been invited into the group. */
export async function getInvitedIndividuals(http: HttpClient, params: GetInvitedIndividualsParams): Promise<SearchResultOfGroupMemberApplicationServerResponse> {
  return http({
    method: 'GET',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/InvitedIndividuals/`
  });
}

export interface RescindGroupMembershipParams {
  /** ID of the group. */
  groupId: number;
  /** MembershipType of the account to leave. */
  membershipType: BungieMembershipType;
}

/**
 * Rescind your application to join the given group or leave the group if you are
 * already a member..
 */
export async function rescindGroupMembership(http: HttpClient, params: RescindGroupMembershipParams): Promise<GroupMemberLeaveResultServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/Rescind/${params.membershipType}/`
  });
}

export interface ApproveAllPendingParams {
  /** ID of the group. */
  groupId: number;
  body: GroupApplicationRequest;
}

/** Approve all of the pending users for the given group. */
export async function approveAllPending(http: HttpClient, params: ApproveAllPendingParams): Promise<ListOfEntityActionResultServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/ApproveAll/`,
    body: params.body
  });
}

export interface DenyAllPendingParams {
  /** ID of the group. */
  groupId: number;
  body: GroupApplicationRequest;
}

/** Deny all of the pending users for the given group. */
export async function denyAllPending(http: HttpClient, params: DenyAllPendingParams): Promise<ListOfEntityActionResultServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/DenyAll/`,
    body: params.body
  });
}

export interface ApprovePendingForListParams {
  /** ID of the group. */
  groupId: number;
  body: GroupApplicationListRequest;
}

/** Approve all of the pending users for the given group. */
export async function approvePendingForList(http: HttpClient, params: ApprovePendingForListParams): Promise<ListOfEntityActionResultServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/ApproveList/`,
    body: params.body
  });
}

export interface ApprovePendingParams {
  /** ID of the group. */
  groupId: number;
  /** The membership id being approved. */
  membershipId: number;
  /** Membership type of the supplied membership ID. */
  membershipType: BungieMembershipType;
  body: GroupApplicationRequest;
}

/**
 * Approve the given membershipId to join the group/clan as long as they have
 * applied.
 */
export async function approvePending(http: HttpClient, params: ApprovePendingParams): Promise<booleanServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/Approve/${params.membershipType}/${params.membershipId}/`,
    body: params.body
  });
}

export interface DenyPendingForListParams {
  /** ID of the group. */
  groupId: number;
  body: GroupApplicationListRequest;
}

/** Deny all of the pending users for the given group that match the passed-in . */
export async function denyPendingForList(http: HttpClient, params: DenyPendingForListParams): Promise<ListOfEntityActionResultServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/DenyList/`,
    body: params.body
  });
}

export interface GetGroupsForMemberParams {
  /** Filter apply to list of joined groups. */
  filter: GroupsForMemberFilter;
  /** Type of group the supplied member founded. */
  groupType: GroupType;
  /** Membership ID to for which to find founded groups. */
  membershipId: number;
  /** Membership type of the supplied membership ID. */
  membershipType: BungieMembershipType;
}

/** Get information about the groups that a given member has joined. */
export async function getGroupsForMember(http: HttpClient, params: GetGroupsForMemberParams): Promise<GroupMembershipSearchResponseServerResponse> {
  return http({
    method: 'GET',
    url: `https://www.bungie.net/Platform/GroupV2/User/${params.membershipType}/${params.membershipId}/${params.filter}/${params.groupType}/`
  });
}

export interface GetPotentialGroupsForMemberParams {
  /** Filter apply to list of potential joined groups. */
  filter: GroupPotentialMemberStatus;
  /** Type of group the supplied member applied. */
  groupType: GroupType;
  /** Membership ID to for which to find applied groups. */
  membershipId: number;
  /** Membership type of the supplied membership ID. */
  membershipType: BungieMembershipType;
}

/**
 * Get information about the groups that a given member has applied to or been
 * invited to.
 */
export async function getPotentialGroupsForMember(http: HttpClient, params: GetPotentialGroupsForMemberParams): Promise<GroupPotentialMembershipSearchResponseServerResponse> {
  return http({
    method: 'GET',
    url: `https://www.bungie.net/Platform/GroupV2/User/Potential/${params.membershipType}/${params.membershipId}/${params.filter}/${params.groupType}/`
  });
}

export interface IndividualGroupInviteParams {
  /** ID of the group you would like to join. */
  groupId: number;
  /** Membership id of the account being invited. */
  membershipId: number;
  /** MembershipType of the account being invited. */
  membershipType: BungieMembershipType;
  body: GroupApplicationRequest;
}

/** Invite a user to join this group. */
export async function individualGroupInvite(http: HttpClient, params: IndividualGroupInviteParams): Promise<GroupApplicationResponseServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/IndividualInvite/${params.membershipType}/${params.membershipId}/`,
    body: params.body
  });
}

export interface IndividualGroupInviteCancelParams {
  /** ID of the group you would like to join. */
  groupId: number;
  /** Membership id of the account being cancelled. */
  membershipId: number;
  /** MembershipType of the account being cancelled. */
  membershipType: BungieMembershipType;
}

/** Cancels a pending invitation to join a group. */
export async function individualGroupInviteCancel(http: HttpClient, params: IndividualGroupInviteCancelParams): Promise<GroupApplicationResponseServerResponse> {
  return http({
    method: 'POST',
    url: `https://www.bungie.net/Platform/GroupV2/${params.groupId}/Members/IndividualInviteCancel/${params.membershipType}/${params.membershipId}/`
  });
}
